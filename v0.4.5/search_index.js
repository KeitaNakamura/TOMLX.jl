var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"DocTestSetup = :(using TOMLX)","category":"page"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [TOMLX]\nPages   = [\"parse.jl\", \"from_dict.jl\"]","category":"page"},{"location":"api/#TOMLX.parse-Tuple{Module, AbstractString}","page":"API","title":"TOMLX.parse","text":"TOMLX.parse(module, str; use_invokelatest = true)\n\nTOMLX.parse(module, str) extends the TOML.parse(str) to read Julia expression. The Julia expression can be specified by @jl or @julia. If use_invokelatest is true, functions are wrapped by Base.invokelatest to avoid world age problem.\n\nExamples\n\njulia> TOMLX.parse(@__MODULE__, \"\"\"\n       float = 0.1\n       udef = @jl undef\n       int = @julia let\n           x = 3\n           y = 2\n           x * y\n       end\n       numbers = [@jl(π), 3.14]\n       \"\"\")\nDict{String, Any} with 4 entries:\n  \"int\"     => 6\n  \"numbers\" => Union{Irrational{:π}, Float64}[π, 3.14]\n  \"udef\"    => UndefInitializer()\n  \"float\"   => 0.1\n\n\n\n\n\n","category":"method"},{"location":"api/#TOMLX.from_dict-Union{Tuple{T}, Tuple{Type{T}, Dict{String, Any}}} where T","page":"API","title":"TOMLX.from_dict","text":"from_dict(::Type, dict)\n\nConstruct struct from dict.\n\nExamples\n\njulia> data = \"\"\"\n       float = 0.1\n       udef = @jl undef\n       int = @julia begin\n           x = 3\n           y = 2\n           x * y\n       end\n       numbers = [@jl(π), 3.14]\n       \"\"\";\n\njulia> dict = TOMLX.parse(@__MODULE__, data)\nDict{String, Any} with 4 entries:\n  \"int\"     => 6\n  \"numbers\" => Union{Irrational{:π}, Float64}[π, 3.14]\n  \"udef\"    => UndefInitializer()\n  \"float\"   => 0.1\n\njulia> struct MyType\n           float::Float64\n           udef::Any\n           int::Int\n           numbers::Vector{Float64}\n       end\n\njulia> TOMLX.from_dict(MyType, dict)\nMyType(0.1, UndefInitializer(), 6, [3.141592653589793, 3.14])\n\njulia> Base.@kwdef struct MyTypeWithKW\n           float::Float64\n           udef::Any\n           int::Int                 = 0\n           numbers::Vector{Float64}\n           name::String             = \"Julia\"\n       end\nMyTypeWithKW\n\njulia> TOMLX.from_dict(MyTypeWithKW, dict)\nMyTypeWithKW(0.1, UndefInitializer(), 6, [3.141592653589793, 3.14], \"Julia\")\n\n\n\n\n\n","category":"method"},{"location":"#TOMLX","page":"Home","title":"TOMLX","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/KeitaNakamura/TOMLX.jl.git","category":"page"}]
}
